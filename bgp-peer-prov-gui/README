This package of scripts is designed to provide a simple user interface for JunOS configuration changes. Driven with Python CGI for apache2
The supplied script is designed to provision BGP peers but can easily be changed to your own needs.


Sample database configuration table I am using for the example.
CREATE TABLE IF NOT EXISTS `router_list` (
  `router_id` int(4) NOT NULL AUTO_INCREMENT,
  `v4_group_name` char(100) NOT NULL,
  `v6_group_name` char(100) NOT NULL,
  `as_path_name` char(100) NOT NULL,
  `router_name` char(100) NOT NULL,
  PRIMARY KEY (`router_id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=22 ;

This is a snipit of the JINJA2 template I am working with:
set protocols bgp group {{ v4_group_name }} neighbor {{ ipv4 }} description {{ name }}
set protocols bgp group {{ v4_group_name }} neighbor {{ ipv4 }} peer-as {{ asn }}
set protocols bgp group {{ v6_group_name }} neighbor {{ ipv6 }} description { name }}
set protocols bgp group {{ v6_group_name }} neighbor {{ ipv6 }} peer-as {{ asn }}
set policy-options as-path-group {{ as_path_name }} as-path as-{{ asn }}-{{ name }} "{{ asn }}{1,} .{1,10}"

The JINJA2 template is populating v4_group_name, v6_group_name, and as_path_name from database records
ipv4, ipv6, asn, and name are all populated from user input in the web form.



The only time data is written to the database is when a peering router is added. There is currently no tracking within the database on peer relationship provisions.

This has all been tested with Debian 7, Apache2 CGIs, mysql, and python 2.7.

Basic file purpose:
index.py - Home page of sorts for this tool. Used to gather information from end user and present end user with list of current routers to provision on
web-bgp-peer-provision.py - This takes the user data, queries the DB for the router record, builds configuration, sends to JunOS device, presents user with a diff and then gives them option to commit.
commit.py - this is a near duplicate to web-bgp-peer-provision.py but instead it commits configuration to JunOS device.
manage.py - This is a simple database manipulation page, view records, add a record, remove a record.
add-bgp-peer-record.py - This is the script that executes an INSERT INTO query to the database with new values
delete-bgp-peer-record.py - This is the script that executes a DELTE query to the database for the router_id record


Example of how scripts are executed:
Script is invoked with what is currently called index.py. This Brings up a simple HTML web form.
The index.py will query database and return all router names in a dropdown box. These should be DNS resolvable.
Fill in the remaining info and hit submit.
This POSTS data into web-bgp-peer-provision.py
web-bgp-peer-provision will utilize the pyez Juniper module along with JINJA2 templates to build the confiugration we will load to device.
web-bgp-peer-provision.py will then push the configuration over to the JunOS device and print the equivelent of a "show | compare 0" as well as
 prompt user if they want to commit. If they don't, just kill page.
If they do the Commit button POSTS data into commit.py
commit.py then commits the configuration to the device.

There is a manage.py page that is used for basic manipulation of the database so end users do not need to work with SQL directly.
This will allow you to add a new record, remove a record, view all records, etc. using a couple of other python scripts.


Overview of how to modify for own use:
Create a database table with the various values you would need to populate based on router
Modify the various scripts mysql queries to view the records and populate values into myvars dictionary
myvars dictionary is used in the template. Simply make/modify the template.set to your liking. Populate the dictionary key in the template file. The myvars value will be inserted into it.
You should not need to modify the lower portions of the scripts actually calling on PYEZ as long as the naming of the scripts/files is not changing.
